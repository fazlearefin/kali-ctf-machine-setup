---

- hosts: localhost

  vars:
    local_username: "{{ local_username }}"
    setup_vuln_docker_images: false

  tasks:
    - name: tune system swappiness
      ansible.posix.sysctl:
        name: vm.swappiness
        value: '0'
        state: present

    - name: perform a dist upgrade
      ansible.builtin.apt:
        update_cache: true
        upgrade: full

    - name: install some recommended additional packages
      ansible.builtin.apt:
        pkg:
          - seclists
          - payloadsallthethings
          - linux-exploit-suggester
          - mat2
          - sshuttle
          - chisel
          - bettercap
          - sslstrip
          - tree
          - parallel
          - meld
          - gobuster
          - chromium
          - nishang
          - 2to3
          - rlwrap
          - bat
          - burpsuite
          - hashrat
          - name-that-hash
          - feroxbuster
          - tealdeer
          - tig
          - python3-cachecontrol
          - python3-poetry
          - python3-pip
          - foliate             # ebook reader
          - pcre2-utils         # provides pcre2grep and pcre2test (perl-compatible regex)
          - kali-tools-top10    # metapackage https://www.kali.org/tools/kali-meta/#kali-tools-top10

    - block:
        - name: Gather the package facts
          ansible.builtin.package_facts:
            manager: auto
          no_log: true

        - name: Print the package facts
          ansible.builtin.debug:
            var: ansible_facts.packages
          no_log: true

        - name: Create symlink to seclists from wordlists dir
          ansible.builtin.file:
            src: /usr/share/seclists
            dest: /usr/share/wordlists/seclists
            state: link
          when: "'seclists' in ansible_facts.packages"

    - name: get offline copy of all tldr pages
      ansible.builtin.shell: tldr --update
      become: true
      become_user: "{{ local_username }}"

    - block:
        - name: install tor and proxychains
          ansible.builtin.apt:
            pkg:
              - tor
              - proxychains4

        - name: copy torrc file
          ansible.builtin.copy:
            src: etc/tor/torrc
            dest: /etc/tor/torrc
            owner: root
            group: root
            mode: '0644'
            backup: true

        - name: ensure tor service runs on system startup
          ansible.builtin.systemd:
            name: tor
            state: started
            enabled: true

        - name: copy proxychains4 config file
          ansible.builtin.copy:
            src: etc/proxychains4.conf
            dest: /etc/proxychains4.conf
            owner: root
            group: root
            mode: '0644'
            backup: true

    - block:
        - name: install packages needed for tmux
          ansible.builtin.apt:
            pkg:
              - tmux
              - xsel

        - name: git clone tmux plugin repo
          ansible.builtin.git:
            repo: 'https://github.com/tmux-plugins/tpm'
            dest: "~{{ local_username }}/.tmux/plugins/tpm"
            clone: true
            version: master
          become: true
          become_user: "{{ local_username }}"

        - name: copy sample .tmux.conf file to the user's homedir
          ansible.builtin.copy:
            src: home/user/.tmux.conf
            dest: "~{{ local_username }}/.tmux.conf"
            mode: '0644'
          become: true
          become_user: "{{ local_username }}"

        - name: install all required tmux plugins
          ansible.builtin.shell: "~{{local_username}}/.tmux/plugins/tpm/scripts/install_plugins.sh"
          become: true
          become_user: "{{ local_username }}"

    - block:
        - name: create local fonts directory
          ansible.builtin.file:
            path: "~{{ local_username }}/.local/share/fonts"
            state: directory

        - name: download nerd fonts to local fonts folder
          ansible.builtin.get_url:
            url: "{{ item  }}"
            dest: "~{{ local_username }}/.local/share/fonts/"
          with_items: "{{ nerd_fonts }}"

        - name: refresh fonts cache
          ansible.builtin.shell: "fc-cache -fv"

        - name: set default font to a nerd font in qterminal
          ansible.builtin.lineinfile:
            path: "~{{local_username}}/.config/qterminal.org/qterminal.ini"
            regexp: '^fontFamily=.*'
            line: "fontFamily={{qterminal_default_font}}"
          ignore_errors: True  # ignore as the user might be using a different desktop environment which may not have qterminal
      become: yes
      become_user: "{{ local_username }}"

    - name: "add {{ local_username }} user to kali-trusted group for passwordless sudo"
      ansible.builtin.user:
        name: "{{ local_username }}"
        groups: kali-trusted
        append: true

    - block:
        - name: create base dir for privesc scripts
          ansible.builtin.file:
            path: /opt/privesc-scripts
            state: directory
            mode: '0775'

        - name: create symlink from /usr/share
          ansible.builtin.file:
            src: /opt/privesc-scripts
            dest: /usr/share/privesc-scripts
            state: link

        - name: git clone PEASS-ng
          ansible.builtin.git:
            repo: 'https://github.com/carlospolop/PEASS-ng.git'
            dest: /opt/privesc-scripts/PEASS-ng
            clone: true
            version: master

        - name: git clone LinEnum
          ansible.builtin.git:
            repo: 'https://github.com/rebootuser/LinEnum.git'
            dest: /opt/privesc-scripts/LinEnum
            clone: true
            version: master

        - name: git clone linux-smart-enumeration
          ansible.builtin.git:
            repo: 'https://github.com/diego-treitos/linux-smart-enumeration'
            dest: /opt/privesc-scripts/linux-smart-enumeration
            clone: true
            version: master

        - name: git clone linux-exploit-suggester
          ansible.builtin.git:
            repo: 'https://github.com/mzet-/linux-exploit-suggester.git'
            dest: /opt/privesc-scripts/linux-exploit-suggester
            clone: true
            version: master

        - name: git clone GitTools
          ansible.builtin.git:
            repo: 'https://github.com/internetwache/GitTools.git'
            dest: /opt/GitTools
            clone: true
            version: master

    - block:
        - name: install docker packages
          ansible.builtin.apt:
            pkg:
              - docker.io
              - python3-docker

        - name: make local user able to run docker commands
          ansible.builtin.user:
            name: "{{ local_username }}"
            append: true
            groups:
              - docker

        - name: pull some vulnerable docker images
          community.docker.docker_image:
            name: "{{ item }}"
            source: pull
          loop:
            - webgoat/webgoat          # docker run --rm -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 -e TZ=UTC --name webgoat webgoat/webgoat
            - bkimminich/juice-shop    # docker run --rm -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
      when: setup_vuln_docker_images

    - block:
        - name: Install DVWA package
          ansible.builtin.apt:
            pkg:
              - dvwa
        # start the service using sudo systemctl start dvwa
        # navigate to http://localhost:42001
        # default creds are admin/password
        # Security Level can be changed in /etc/dvwa/config/config.inc.php

    - name: download latest tools from projectdiscovery
      block:
        - name: Create temporary projectdiscovery tools download directory
          ansible.builtin.file:
            path: /tmp/projectdiscovery
            state: directory

        - name: Download projectdiscovery tool zips
          ansible.builtin.get_url:
            url: "{{ item.url }}"
            dest: "/tmp/projectdiscovery/{{ item.url | basename }}"
          loop: "{{ projectdiscovery_tools }}"

        - name: Unarchive projectdiscovery tool zips
          ansible.builtin.unarchive:
            src: "/tmp/projectdiscovery/{{ item.url | basename }}"
            dest: /tmp/projectdiscovery
            remote_src: yes
          loop: "{{ projectdiscovery_tools }}"

        - name: Copy projectdiscovery binaries to /usr/local/bin
          ansible.builtin.copy:
            src: "/tmp/projectdiscovery/{{ item.1 }}"
            dest: /usr/local/bin/
            remote_src: yes
            mode: 0755
          loop: "{{ projectdiscovery_tools | subelements('binaries') }}"

        - name: Remove projectdiscovery temporary download directory
          ansible.builtin.file:
            path: /tmp/projectdiscovery
            state: absent

        - name: Update projectdiscovery binaries
          ansible.builtin.command: "{{ item  }} -update"
          with_items: "{{ projectdiscovery_tools | json_query('[].binaries[]')  }}"

    - name: Final cleanup
      block:
        - name: cleanup apt packages and repodata
          ansible.builtin.apt:
            autoremove: true
            autoclean: true
